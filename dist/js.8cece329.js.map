{"version":3,"sources":["src/js/modules/fetch.js","src/js/modules/delete.js","src/js/modules/list.js","src/js/modules/adding.js","src/js/modules/convertimg.js","src/js/index.js"],"names":["fetchData","fetch","Fetch","json","character","console","error","data","characterId","Array","deleteCharacters","deleteBtn","document","getElementsByClassName","i","addEventListener","Confirm","confirm","id","method","headers","location","reload","length","listCharacters","forEach","name","shortDescription","image","description","clone","querySelector","cloneNode","content","target","innerHTML","src","appendChild","push","addingCharacters","inputs","from","querySelectorAll","getElementById","values","map","value","trim","some","alert","body","JSON","stringify","response","ok","status","convert","e","file","files","reader","FileReader","onloadend","result","replace","readAsDataURL","$","ready","click","modal","then"],"mappings":"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","file":"js.8cece329.js","sourceRoot":"..","sourcesContent":["async function fetchData() {\n  try {\n    const Fetch = await fetch(\n      \"https://character-database.becode.xyz/characters\"\n    );\n    const character = await Fetch.json();\n    return character;\n  } catch (error) {\n    console.error(error);\n  }\n}\nconst data = fetchData();\n\nexport { data };\n","const characterId = new Array();\n\nfunction deleteCharacters() {\n  const deleteBtn = document.getElementsByClassName(\"delete\");\n  let Confirm;\n\n  for (let i = 0; i < deleteBtn.length; i++) {\n    deleteBtn[i].addEventListener(\"click\", async () => {\n      Confirm = confirm(\"REALLY ?!\");\n\n      if (Confirm === true) {\n        const id = characterId[i];\n\n        try {\n          const response = await fetch(\n            `https://character-database.becode.xyz/characters/${id}`,\n            {\n              method: \"DELETE\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n            }\n          );\n          location.reload();\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    });\n  }\n}\n\nexport { characterId, deleteCharacters };\n","import { characterId } from \"./delete.js\";\n\ncharacterId;\n\nfunction listCharacters(character) {\n  character.forEach(({ name, shortDescription, image, description, id }) => {\n    const clone = document.querySelector(\"#hero-tpl\").cloneNode(true).content;\n    const target = document.querySelector(\"#target\");\n\n    clone.querySelector(\"#heroName\").innerHTML = name;\n    clone.querySelector(\"#heroShort\").innerHTML = shortDescription;\n    clone.querySelector(\"#heroImg\").src = `data:image/*;base64,${image}`;\n    clone.querySelector(\"#heroLong\").innerHTML = description;\n\n    target.appendChild(clone);\n\n    characterId.push(id);\n  });\n}\nexport { listCharacters };\n","function addingCharacters() {\n  const inputs = Array.from(document.querySelectorAll(\".modal-body input\"));\n\n  document.getElementById(\"submitHero\").addEventListener(\"click\", async () => {\n    const values = inputs.map(({ value }) => value.trim());\n    const [name, shortDescription, description] = values;\n\n    if (values.some((value) => value === \"\")) {\n      // eslint-disable-next-line no-alert\n      alert(\"There's an empty input!\");\n      return;\n    }\n\n    const response = await fetch(\n      \"https://character-database.becode.xyz/characters\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          description,\n          shortDescription,\n          name,\n          image,\n        }),\n      }\n    );\n\n    document.location.reload();\n    if (!response.ok) {\n      console.error(response.status);\n    }\n  });\n}\n\nexport { addingCharacters };\n","function convert() {\n  document.querySelector(\"#HeroImage\").addEventListener(\"change\", (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      image = reader.result.replace(/^data:image\\/[a-z]+;base64,/, \"\"); // strip off the data: url prefix to get just the base64-encoded bytes from  https://stackoverflow.com/questions/38633061/how-can-i-strip-the-dataimage-part-from-a-base64-string-of-any-image-type-in-ja\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nexport { convert };\n","// to make the modal working using jquery from https://www.w3schools.com/bootstrap/tryit.asp?filename=trybs_ref_js_modal_js&stacked=h\n\nimport { data } from './modules/fetch.js';\nimport { listCharacters } from './modules/list.js';\nimport { addingCharacters } from './modules/adding.js';\nimport { deleteCharacters } from './modules/delete.js';\nimport { convert } from './modules/convertimg.js';\n\n$(document).ready(() => {\n  $('#myBtn').click(() => {\n    $('#myModal').modal();\n  });\n});\n\ndata.then((character) => {\n  listCharacters(character);\n  convert();\n  addingCharacters();\n  deleteCharacters();\n});\n"]}